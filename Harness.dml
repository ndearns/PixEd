object Harness
{
    attr        img                : Image;
    attr        tex                : Texture;
    attr        mpos               : Vector2;
    attr        mdown              : Boolean;
    attr        mpressed           : Boolean;
    attr        sdown              : Boolean;
    attr        fdown              : Boolean;
    attr        bcolor             : Color;
    attr        t_res              : Coord;  "number of tile pixels in Tile side"
    attr        p_span             : Coord;  "number of screen pixels in Pixel or ColorWell"
    attr        x_tile_view        : Coord;
    attr        y_tile_view        : Coord;
    attr        x_mini_view        : Coord;
    attr        y_mini_view        : Coord;
    attr        x_palette          : Coord;
    attr        y_palette          : Coord;
    attr        x_save_graphic     : Coord;
    attr        y_save_graphic     : Coord;
    attr        x_save_tile        : Coord;
    attr        y_save_tile        : Coord;
    attr        x_load_tile        : Coord;
    attr        y_load_tile        : Coord;
    attr        x_add_tile         : Coord;
    attr        y_add_tile         : Coord;
    attr        x_del_tile         : Coord;
    attr        y_del_tile         : Coord;
    attr        x_next_tile        : Coord;
    attr        y_next_tile        : Coord;
    attr        x_prev_tile        : Coord;
    attr        y_prev_tile        : Coord;
    attr        working_tile_index : Coord;


    relation    ui              : Harness -> Raylib;
    relation    graphic         : Harness -> Graphic;
    relation    working_tile    : Harness -> Tile;
    relation    palette         : Harness -> Palette;
    relation    uses_pixel      : Harness -> Pixel;
    relation    uses_color_well : Harness -> ColorWell;

    proc main( arg_count : ArgCount, arg_strings : ArgStrings) : ExitCode 
         {
             let the_harness : Harness = new Harness;
             let the_ui      : Raylib  = new Raylib;
             let the_graphic : Graphic = new Graphic;
             let the_palette : Palette = new Palette;

             call the_harness.set_t_res( 32 );   "number of pixels in a tile side"
             call the_harness.set_p_span( 24 );  "number of screen pixels in a tile pixel"

             if   arg_count > 1 
                  => call the_harness.set_t_res( std::atoi( arg_strings[1] ) );
             if   arg_count > 2 
                  => call the_harness.set_p_span( std::atoi( arg_strings[2] ) );

             call PixelGraphics::swa.print(arg_strings[0]);
             call PixelGraphics::swa.print(' tile resolution: ');
             call PixelGraphics::swa.print( std::to_string(the_harness.t_res()) );
             call PixelGraphics::swa.print(' pixel resolution: ');
             call PixelGraphics::swa.println( std::to_string(the_harness.p_span()) );

             call the_ui.turn_logging_off();

             call the_harness.initialise();
             call the_harness.ui_link( the_ui );

             call the_graphic.initialise( the_harness.t_res(), the_harness.p_span() );
             call the_harness.graphic_link( the_graphic );
             call the_harness.set_working_tile_index( 0 );
             call the_harness.working_tile_link( the_graphic.tiles()[0] );

             call the_harness.palette_link( the_palette );
             call the_palette.initialise();

                 call the_harness.start();

             call the_harness.ui_unlink();

             return ExitCode::Ok;
         };

    proc initialise()
         {
             call set_x_tile_view(    (3*p_span())                                     );
             call set_y_tile_view(    (3*p_span())                                     );
             call set_x_mini_view(    (3*p_span()) + (t_res()*p_span()) + (1*p_span()) );
             call set_y_mini_view(    (3*p_span()) + (9      *p_span()) + (1*p_span()) );
             call set_x_palette(      (3*p_span()) + (t_res()*p_span()) + (1*p_span()) );
             call set_y_palette(      (3*p_span())                                     );
             call set_x_add_tile(     (3*p_span()) + (t_res()*p_span()) + (1*p_span()) );
             call set_y_add_tile(     (3*p_span()) + (t_res()*p_span()) - (2*p_span()) );
             call set_x_del_tile(     (3*p_span()) + (t_res()*p_span()) + (2*p_span()) );
             call set_y_del_tile(     (3*p_span()) + (t_res()*p_span()) - (2*p_span()) );
             call set_x_next_tile(    (3*p_span()) + (t_res()*p_span()) + (2*p_span()) );
             call set_y_next_tile(    (3*p_span()) + (t_res()*p_span()) - (3*p_span()) );
             call set_x_prev_tile(    (3*p_span()) + (t_res()*p_span()) + (1*p_span()) );
             call set_y_prev_tile(    (3*p_span()) + (t_res()*p_span()) - (3*p_span()) );
             call set_x_save_graphic( (3*p_span()) + (t_res()*p_span()) + (1*p_span()) );
             call set_y_save_graphic( (3*p_span()) + (t_res()*p_span()) - (1*p_span()) );
             call set_x_save_tile(    (3*p_span()) + (t_res()*p_span()) + (2*p_span()) );
             call set_y_save_tile(    (3*p_span()) + (t_res()*p_span()) - (1*p_span()) );
             call set_x_load_tile(    (3*p_span()) + (t_res()*p_span()) + (3*p_span()) );
             call set_y_load_tile(    (3*p_span()) + (t_res()*p_span()) - (1*p_span()) );
         };

    proc start()
         {
             call ui().init_window( (3 * p_span()) + (t_res() * p_span()) + (7*p_span()),
                                         (3 * p_span()) + (t_res() * p_span()) + (3*p_span()),
                                         'PixelGraphics domain harness' );
             call ui().set_target_fps( 90 );

             "loop infinitely, until window closed"
                 foreach i : FrameCount | 0 <= i and !ui().window_should_close()
                     =>
                         call do_frame( i );

             call ui().close_window();
         };

    proc do_frame( frame_number : FrameCount ) 
         {
            "--------------------------------------------------"
            call set_mdown( false );
            if   ui().mouse_button_is_down( 0 ) 
                  => call set_mdown( true );
            if   !mpressed() and ui().mouse_button_pressed( 0 ) 
                  => call set_mpressed( true );
            call set_mpos( ui().get_mouse_position() );

            "--------------------------------------------------"
            call set_sdown( ui().is_key_down( KEY_LEFT_SHIFT ) );
            call set_fdown( ui().is_key_down( KEY_F ) );

            "--------------------------------------------------"
            let tile_hit : Boolean = mdown_in_grid( x_tile_view(), y_tile_view(), t_res(), t_res() );
            if  mdown() and tile_hit and !sdown() and !fdown() => paint_pixel_under_mouse();
            if  mdown() and tile_hit and  sdown() and !fdown() => erase_pixel_under_mouse();
            if  mpressed() and tile_hit and !sdown() and  fdown() => flood_pixel_under_mouse();

            "--------------------------------------------------"
            let palette_hit : Boolean = mdown_in_grid( x_palette(), y_palette(), 3, 9);
            if mdown() and palette_hit => select_color_well_under_mouse();

            "--------------------------------------------------"
            let add_button_hit : Boolean = mdown_on_tile_at( x_add_tile(), y_add_tile() );
            if mpressed() and add_button_hit => graphic().add_tile();
            if mpressed() and add_button_hit => set_working_tile_index( graphic().tiles()..size() - 1 );
            if mpressed() and add_button_hit => working_tile_link( graphic().tiles()[working_tile_index()] );

            "--------------------------------------------------"
            let prev_button_hit : Boolean = mdown_on_tile_at( x_prev_tile(), y_prev_tile() );
            if  mpressed() and prev_button_hit and 0  < working_tile_index() 
              => 
                  set_working_tile_index( working_tile_index() - 1 );
            if  mpressed() and prev_button_hit and 0 <= working_tile_index() 
              => 
                  working_tile_link( graphic().tiles()[working_tile_index()] );

            "--------------------------------------------------"
            let next_button_hit : Boolean = mdown_on_tile_at( x_next_tile(), y_next_tile() );
            if  mpressed() and next_button_hit and working_tile_index() < graphic().tiles()..size()-1
              => 
                  set_working_tile_index( working_tile_index() + 1 );
            if mpressed() and next_button_hit and working_tile_index() < graphic().tiles()..size()
              => 
                  working_tile_link( graphic().tiles()[working_tile_index()] );

            "--------------------------------------------------"
            let save_graphic_hit : Boolean = mdown_on_tile_at( x_save_graphic(), y_save_graphic() );
            if  mpressed() and save_graphic_hit => save_graphic();

            "--------------------------------------------------"
            let save_tile_hit : Boolean = mdown_on_tile_at( x_save_tile(), y_save_tile() );
            if  mpressed() and save_tile_hit => save_tile();

            "--------------------------------------------------"
            let load_button_hit : Boolean = mdown_on_tile_at( x_load_tile(), y_load_tile() );
            if  mpressed() and load_button_hit => load_graphic();

            "--------------------------------------------------"
            if mpressed() => call set_mpressed( false ); 
                  "mouse press handled, so clear it,
                   otherwise we get activations a 60 fps"

            "--------------------------------------------------"
            "call EventQueue::defaultEQ().service_queue();"

                                "render"
            "--------------------------------------------------"
            call ui().begin_drawing();

                call ui().clear_background( WHITE );
                call draw_time();
                call draw_working_tile();
                call draw_palette();
                call draw_mini_view();
                call draw_button_at( '<<', x_prev_tile(), y_prev_tile() );
                call draw_button_at( '>>', x_next_tile(), y_next_tile() );
                call draw_button_at( '+',  x_add_tile(),  y_add_tile() );
                call draw_button_at( '-',  x_del_tile(),  y_del_tile() );
                call draw_button_at( 'G',  x_save_graphic(), y_save_graphic() );
                call draw_button_at( 'T',  x_save_tile(), y_save_tile() );
                call draw_button_at( 'L',  x_load_tile(), y_load_tile() );

            call ui().end_drawing();
            "--------------------------------------------------"
         };

    proc pixel_under_mouse() : Pixel
        {
             let pixel_span : Coord = graphic().grid_span();
             let  x : Coord = 0;
             let  y : Coord = 0;
             set  x = (mpos()..x - x_tile_view()) / pixel_span;
             set  y = (mpos()..y - y_tile_view()) / pixel_span;
             foreach pix : working_tile().pixels()
                 | pix.x() = x and pix.y() = y
                 => return pix;
             return nullptr;
        };

    proc pixel_at( x : Coord, y : Coord ) : Pixel
         {
            return working_tile().pixels()[ y * t_res() + x ];
         };

    proc flood_pixel_under_mouse()
         {
            if ! ui().cmatch( pixel_under_mouse().color(), bcolor() )
            => call replace_color( pixel_under_mouse(), pixel_under_mouse().color() );
         };

    proc replace_color( p : Pixel, rc : Color )
         {
            pre ui().cmatch(p.color(), rc);
            call p.set_color( bcolor() );

            if   0 < p.x() and ui().cmatch(pixel_at(p.x()-1,p.y()).color() , rc)
                => call replace_color( pixel_at(p.x()-1,p.y()), rc );
            if   p.x() < t_res()-1 and ui().cmatch(pixel_at(p.x()+1,p.y()).color() , rc)
                => call replace_color( pixel_at(p.x()+1,p.y()), rc );
            if   0 < p.y() and ui().cmatch(pixel_at(p.x(),p.y()-1).color() , rc)
                => call replace_color( pixel_at(p.x(),p.y()-1), rc );
            if   p.y() < t_res()-1 and ui().cmatch(pixel_at(p.x(),p.y()+1).color() , rc)
                => call replace_color( pixel_at(p.x(),p.y()+1), rc );
         };

    proc mdown_on_tile_at( x : Coord, y : Coord ) : Boolean
         {
             let result : Boolean = false;
             let dx : Coord = 0;
             set dx = x + p_span();
             let dy : Coord = 0;
             set dy = y + p_span();

             if  x < mpos()..x and mpos()..x < dx and
                 y < mpos()..y and mpos()..y < dy
                =>
                   set result = true;
             return result;
         };

    proc select_color_well_under_mouse()
         {
             let  x : Coord = 0;
             let  y : Coord = 0;
             set  x = (mpos()..x - x_palette()) / p_span();
             set  y = (mpos()..y - y_palette()) / p_span();
             call set_bcolor( palette().color_wells()[y*3 + x].color() );
         };

    proc mdown_in_grid( x1 : Coord, y1 : Coord, dx : Coord, dy : Coord ) : Boolean
         {
             let result : Boolean = false;
             let x2 : Coord = 0;
             set x2 = x1 + (p_span() * dx);
             let y2 : Coord = 0;
             set y2 = y1 + (p_span() * dy);

             if x1 < mpos()..x and mpos()..x < x2 and
                y1 < mpos()..y and mpos()..y < y2
                =>
                   set result = true;
             return result;
         };

    proc paint_pixel_under_mouse()
         {
             let pixel_span : Coord = graphic().grid_span();
             let  x : Coord = 0;
             let  y : Coord = 0;
             set  x = (mpos()..x - x_tile_view()) / pixel_span;
             set  y = (mpos()..y - y_tile_view()) / pixel_span;
             foreach pix : working_tile().pixels()
                 | pix.x() = x and pix.y() = y
                 => call pix.set_color( bcolor() );
         };

    proc erase_pixel_under_mouse()
         {
             let pixel_span : Coord = graphic().grid_span();
             let  x : Coord = 0;
             let  y : Coord = 0;
             set  x = (mpos()..x - x_tile_view()) / pixel_span;
             set  y = (mpos()..y - y_tile_view()) / pixel_span;
             foreach pix : working_tile().pixels()
                 | pix.x() = x and pix.y() = y
                 => call pix.set_color( graphic().background_color() );
         };

    proc draw_button_at( label : Label, x : Coord, y : Coord )
         {
             call ui().draw_rectangle_lines( x, y, p_span(), p_span(), DARKGRAY );
             call ui().draw_text( label, x+p_span()/5, y+2, p_span(), DARKGRAY );
         };

    proc draw_palette()
         {
             foreach n : Coord | 0 <= n and n < palette().color_wells()..size()
                 => call draw_color_well( n );
             );
         };

    proc draw_color_well( n : Coord )
         {
             let x_well : Coord = 0;
             let y_well : Coord = 0;

             set x_well = x_palette() + (p_span() * (n%3));
             set y_well = y_palette() + (p_span() * (n/3));
             call ui().draw_rectangle      ( x_well, y_well, p_span(), p_span(), palette().color_wells()[n].color());
             call ui().draw_rectangle_lines( x_well, y_well, p_span(), p_span(), DARKGRAY);
         };

    proc draw_working_tile( )
         {
             foreach p : working_tile().pixels()
                 => call draw_pixel( p );
         };

    proc draw_pixel( p : Pixel )
         {
             let x : Coord = 0;
             set x = x_tile_view() + (p_span() * p.x());
             let y : Coord = 0;
             set y = y_tile_view() + (p_span() * p.y());
             call ui().draw_rectangle      ( x, y, p_span(), p_span(), p.color());
             call ui().draw_rectangle_lines( x, y, p_span(), p_span(), LIGHTGRAY);
         };

    proc draw_mini_view( )
         {
             foreach p : working_tile().pixels()
                 => call draw_mini_pixel( p );
         };

    proc draw_mini_pixel( p : Pixel )
         {
             let x : Coord = 0;
             set x = x_mini_view() + (2*p.x());
             let y : Coord = 0;
             set y = y_mini_view() + (2*p.y());
             call ui().draw_rectangle( x, y, 2, 2, p.color() );
         };

    proc draw_mouse_coords() {
             call ui().draw_text( mpos()..x, 20, 50, p_span(), BLACK );
             call ui().draw_text( mpos()..y, 20, 80, p_span(), BLACK );
         };

    proc draw_time()
         {
             let  screen_width : Coord = ui().get_screen_width();
             call ui().draw_text( ui().time_HHMMSS(), (screen_width/2) - 80, 20, p_span(), PINK );
         };

    proc save_graphic()
         {
             call PixelGraphics::swa.println('saving graphic!');
             let tile_count : Coord = 0;
             set tile_count = graphic().tiles()..size();
             call ui().begin_drawing();
             let img : Image = ui().gen_image_color( t_res()*tile_count, t_res(), bcolor() );
             foreach n : Coord | 0 <= n and n < tile_count
                 => call save_tile_in_graphic( img, n );
             call ui().end_drawing();
             call ui().export_image( img );
             call ui().unload_image( img );
         };

    proc save_tile_in_graphic( img : Image, n : Coord )
         {
             foreach p : graphic().tiles()[n].pixels()
                => call ui().image_draw_pixel( &img, t_res()*n + p.x(), p.y(), p.color() );
         };

    proc save_tile()
         {
             call PixelGraphics::swa.println('saving tile!');
             call ui().begin_drawing();
             let img : Image = ui().gen_image_color( t_res(), t_res(), bcolor() );
             foreach p : working_tile().pixels()
                 => call ui().image_draw_pixel( &img, p.x(), p.y(), p.color() );
             call ui().end_drawing();
             call ui().export_image( img );
             call ui().unload_image( img );
         };

    proc load_graphic()
         {
             call PixelGraphics::swa.println('load file!');
         };
};
